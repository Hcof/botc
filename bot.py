from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram import types
from keyboards import *
from db import Database
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

bot = Bot(token="7013945314:AAFFMhgCIe-8ibJd9D1Bk8u8OBAZzqUpp24")
dp = Dispatcher(bot, storage = MemoryStorage())
db = Database(r'db.db')

class Form(StatesGroup):
    waiting_for_message = State()
class Form1(StatesGroup):
    waiting_for_message = State()

async def check_sub_channel(user_id):
    try:
        chat_id = -1002020136505
        chat_member = await bot.get_chat_member(chat_id, user_id)
        is_subscribed = chat_member.status in [types.ChatMemberStatus.MEMBER, types.ChatMemberStatus.ADMINISTRATOR, types.ChatMemberStatus.CREATOR]
        return is_subscribed
    except Exception as e:
        print(e)
        return False

def webAppKeyboard(): #—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å webapp –∫–Ω–æ–ø–∫–æ–π
   keyboard = types.InlineKeyboardMarkup(row_width=1) #—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
   one_butt_and = types.InlineKeyboardMarkup(text="–î–ª—è Android/Windows üñ•", web_app=types.WebAppInfo(url = "https://hcof.github.io/site/"))
   one_butt_apple = types.InlineKeyboardMarkup(text="–î–ª—è Apple üì±", web_app=types.WebAppInfo(url = "https://superfirsthero.github.io/site/"))
   keyboard.add(one_butt_and).add(one_butt_apple)

   return keyboard


@dp.message_handler()
async def start(message: types.Message):
    var = await check_sub_channel(message.from_user.id)
    print(var)
    if var== True:
        if db.user_exists(message.from_user.id):
            await message.reply("<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üî∏ Hack mines V3.0üî∏!</b>\n<i>üí£Mines - —ç—Ç–æ –≥—ç–º–±–ª–∏–Ω–≥ –∏–≥—Ä–∞ –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ 1win, –∫–æ—Ç–æ—Ä–∞—è –æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º ‚Äú–°–∞–ø—ë—Ä–µ‚Äù</i>. –í–∞—à–∞ —Ü–µ–ª—å - –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏ –∏ –Ω–µ –ø–æ–ø–∞–¥–∞—Ç—å—Å—è –≤ –ª–æ–≤—É—à–∫–∏.\n–ù–∞—à –±–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ—Ç OpenAI.\n–û–Ω –º–æ–∂–µ—Ç –ø—Ä–µ–¥—É–≥–∞–¥–∞—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–≤—ë–∑–¥ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 80-90%.", reply_markup=get_sygnal_markup, parse_mode=types.ParseMode.HTML)

        else:
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:", reply_markup = register_acc_markup)
    else:
        await message.reply(f"<b>–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ, <i>{message.from_user.full_name}</i>\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:</b>", parse_mode=types.ParseMode.HTML, reply_markup = subscribeCheck_markup)





@dp.callback_query_handler(lambda c: c.data.startswith('subscribe_button_check'))
async def col1(call: types.CallbackQuery):
    bool_res = await check_sub_channel(user_id = call.from_user.id)
    if bool_res == True:
        await bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f'<b>‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª,</b>\nüïπ–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.',
            parse_mode=types.ParseMode.HTML,
            reply_markup=register_acc_markup
        )
    else:
        await bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f'<b>‚ùå–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª,</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            reply_markup=subscribeCheck_markup,
            parse_mode=types.ParseMode.HTML
        )

@dp.callback_query_handler(lambda c: c.data.startswith('acc_reg'))
async def col1(call: types.CallbackQuery):
    await bot.send_message(call.from_user.id, "üí† 1. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ <b>–Ω–∞ —Å–∞–π—Ç–µ 1WIN –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ</b>\nüí† 2. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ c–∫–æ–ø–∏—Ä—É–π—Ç–µ <b>–≤–∞—à –∞–π–¥–∏ –Ω–∞ —Å–∞–π—Ç–µ</b> (–í–∫–ª–∞–¥–∫–∞ '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' –∏ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –±—É–¥–µ—Ç –≤–∞—à ID).\nüí† 3. –ò –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ <b>—Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç—É</b>!", parse_mode=types.ParseMode.HTML, reply_markup=keyboard_link)
    await Form.waiting_for_message.set()

@dp.callback_query_handler(lambda c: c.data.startswith('get_sygnal'))
async def col1(call: types.CallbackQuery):
    await bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü—é:", reply_markup=webAppKeyboard())

@dp.message_handler(state=Form.waiting_for_message)
async def process_action(message: types.Message, state: FSMContext):
    try:
        if int(message.text) >1 and len(message.text) >=5 and len(message.text) <= 10:
            await message.reply("<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üî∏ Hack mines V3.0 üî∏!</b>\n<i>üí£Mines - —ç—Ç–æ –≥—ç–º–±–ª–∏–Ω–≥ –∏–≥—Ä–∞ –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ 1win, –∫–æ—Ç–æ—Ä–∞—è –æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º ‚Äú–°–∞–ø—ë—Ä–µ‚Äù</i>. –í–∞—à–∞ —Ü–µ–ª—å - –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏ –∏ –Ω–µ –ø–æ–ø–∞–¥–∞—Ç—å—Å—è –≤ –ª–æ–≤—É—à–∫–∏.\n–ù–∞—à –±–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ—Ç OpenAI.\n–û–Ω –º–æ–∂–µ—Ç –ø—Ä–µ–¥—É–≥–∞–¥–∞—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–≤—ë–∑–¥ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 80-90%.", reply_markup=get_sygnal_markup, parse_mode=types.ParseMode.HTML)
        else:
            await message.reply("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–π–¥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup = register_acc_markup)
        await state.finish()
    except Exception:
        await message.reply("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–π–¥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup = register_acc_markup)


@dp.callback_query_handler(lambda c: c.data.startswith('get_sigg'))
async def col1(call: types.CallbackQuery):
    await bot.send_message(call.from_user.id, "üí† –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–π–¥–∏ –Ω–∞ —Å–∞–π—Ç–µ 1WIN", parse_mode=types.ParseMode.HTML, reply_markup=keyboard_link)
    await Form1.waiting_for_message.set()

@dp.message_handler(state=Form1.waiting_for_message)
async def process_action(message: types.Message, state: FSMContext):
    try:
        if int(message.text) >1 and len(message.text) >=5 and len(message.text) <= 10:
            await message.reply("<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é</b>.", reply_markup=webAppKeyboard(), parse_mode=types.ParseMode.HTML)
        await state.finish()
    except Exception:
        await message.reply("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–π–¥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

if __name__ == "__main__":
    try:
        executor.start_polling(dp, skip_updates=True)
    
    except Exception:
        pass